#!/usr/bin/groovy
@Library('jenkins-pipeline@v0.4.4')
import com.invoca.utils.*;

APPRAISAL_JOB_NAME = '/Aggregate Gem/Appraisal Test'

pipeline {
  agent {
    kubernetes {
      defaultContainer 'ruby'
      yamlFile '.jenkins/ruby_build_pod.yml'
    }
  }

  environment { GITHUB_TOKEN = credentials('github_token') }

  stages {
    stage('Setup') {
      steps {
        updateGitHubStatus('clean-build', 'pending', "Running unit tests")
        sh 'bundle install'
        sh 'bundle exec rake db:migrate'
      }
    }

    stage("Tests") {
      parallel {
        stage('Unit Tests') {
          steps { sh "bundle exec rake test" }
          post  { always { junit 'test/reports/*.xml' } }
        }

        stage("Rails 4 Appraisal") {
          steps {
            build(
              job: APPRAISAL_JOB_NAME,
              parameters: [
                string(name: "APPRAISAL_NAME", value: "rails-4"),
                string(name: "GIT_COMMIT", value: env.GIT_COMMIT)
              ],
              propagate: true
            )
          }
        }

        stage("Rails 5 Appraisal") {
          steps {
            build(
              job: APPRAISAL_JOB_NAME,
              parameters: [
                string(name: "APPRAISAL_NAME", value: "rails-5"),
                string(name: "GIT_COMMIT", value: env.GIT_COMMIT)
              ],
              propagate: true
            )
          }
        }

        stage("Rails 6 Appraisal") {
          steps {
            build(
              job: APPRAISAL_JOB_NAME,
              parameters: [
                string(name: "APPRAISAL_NAME", value: "rails-6"),
                string(name: "GIT_COMMIT", value: env.GIT_COMMIT)
              ],
              propagate: true
            )
          }
        }
      }
    }
  }

  post {
    success { updateGitHubStatus('clean-build', 'success', "Unit tests passed") }
    failure { updateGitHubStatus('clean-build', 'failure', "Unit tests failed") }
  }
}

void updateGitHubStatus(String context, String status, String description) {
  gitHubStatus([
    repoSlug:    'Invoca/aggregate',
    sha:         env.GIT_COMMIT,
    description: description,
    context:     context,
    targetURL:   env.RUN_DISPLAY_URL,
    token:       env.GITHUB_TOKEN,
    status:      status
  ])
}
